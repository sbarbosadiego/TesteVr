/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.testevr.view;

import com.testevr.controller.ClienteController;
import com.testevr.controller.ItemPedidoController;
import com.testevr.controller.PedidoController;
import com.testevr.controller.ProdutoController;
import com.testevr.model.ClienteModel;
import com.testevr.model.ItemPedidoModel;
import com.testevr.model.PedidoModel;
import com.testevr.model.ProdutoModel;
import com.testevr.services.ValidadorCredito;
import com.testevr.util.FormatarValor;
import java.awt.event.KeyEvent;
import java.text.NumberFormat;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * @author Diego Barbosa
 */
public class PedidoView extends javax.swing.JFrame {

    // Idioma - Data
    Locale localeBR = new Locale("pt", "BR");
    NumberFormat valorReal = NumberFormat.getCurrencyInstance(localeBR);
    LocalDateTime dataAtual = LocalDateTime.now();

    // Cliente
    ClienteModel clienteModel = new ClienteModel();
    ClienteController clienteController = new ClienteController();
    ArrayList<ClienteModel> listaClienteModel = new ArrayList<>();

    // Produtos
    ProdutoModel produtoModel = new ProdutoModel();
    ProdutoController produtoController = new ProdutoController();
    ArrayList<ProdutoModel> listaProdutosModel = new ArrayList<>();

    // Pedido
    PedidoModel pedidoModel = new PedidoModel();
    PedidoController pedidoController = new PedidoController();

    // Item Pedido
    ItemPedidoModel itemPedidoModel = new ItemPedidoModel();
    ItemPedidoController itemPedidoController = new ItemPedidoController();
    List<ItemPedidoModel> listaItensPedido = new ArrayList<>();

    // Validador
    ValidadorCredito validador = new ValidadorCredito();

    // Tela
    private MainView mainView;

    DefaultListModel modelo;
    int Enter = 0;

    /**
     * Creates new form ViewVendas
     */
    public PedidoView(MainView mainView) {
        initComponents();
        this.mainView = mainView;
        modelo = new DefaultListModel();
        listaPesquisarCliente.setVisible(false);
        listaPesquisarProduto.setVisible(false);
        listaPesquisarCliente.setModel(modelo);
        listaPesquisarProduto.setModel(modelo);
        listarPesquisaClientes();
        listarPesquisaProdutos();
    }

    public PedidoView() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        listaPesquisarCliente = new javax.swing.JList<>();
        listaPesquisarProduto = new javax.swing.JList<>();
        campoPesquisaProduto = new javax.swing.JTextField();
        campoPesquisaCliente = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnAdicionar = new javax.swing.JButton();
        jtfQuantidade = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtProdutos = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jtfValorTotal = new javax.swing.JTextField();
        btnExcluir = new javax.swing.JButton();
        jtfCodigoCliente = new javax.swing.JFormattedTextField();
        jtfCodigoProduto = new javax.swing.JFormattedTextField();
        jtfCodigoPedido = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Pedido");
        setMinimumSize(new java.awt.Dimension(820, 600));
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        listaPesquisarCliente.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        listaPesquisarCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listaPesquisarClienteMousePressed(evt);
            }
        });
        jPanel1.add(listaPesquisarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 63, 516, 93));

        listaPesquisarProduto.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        listaPesquisarProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listaPesquisarProdutoMousePressed(evt);
            }
        });
        jPanel1.add(listaPesquisarProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 131, 396, 93));

        campoPesquisaProduto.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        campoPesquisaProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPesquisaProdutoActionPerformed(evt);
            }
        });
        campoPesquisaProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoPesquisaProdutoKeyReleased(evt);
            }
        });
        jPanel1.add(campoPesquisaProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 103, 400, 30));

        campoPesquisaCliente.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        campoPesquisaCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPesquisaClienteActionPerformed(evt);
            }
        });
        campoPesquisaCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoPesquisaClienteKeyReleased(evt);
            }
        });
        jPanel1.add(campoPesquisaCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 35, 520, 30));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setText("Cód. Cliente:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setText("Cliente:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 10, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel4.setText("Cód. Produto:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 78, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel5.setText("Quantidade:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(596, 78, -1, -1));

        btnAdicionar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdicionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(752, 103, 115, 30));

        jtfQuantidade.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jtfQuantidade.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jtfQuantidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfQuantidadeKeyPressed(evt);
            }
        });
        jPanel1.add(jtfQuantidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(596, 103, 144, 30));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel6.setText("Valor Total:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(594, 557, -1, 30));

        btnSalvar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        jPanel1.add(btnSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(767, 600, 100, 30));

        btnCancelar.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 600, 100, 30));

        jtProdutos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jtProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód. Prod.", "Produto", "Qtd.", "Valor Un.", "Valor Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtProdutos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtProdutosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jtProdutos);
        if (jtProdutos.getColumnModel().getColumnCount() > 0) {
            jtProdutos.getColumnModel().getColumn(0).setMinWidth(90);
            jtProdutos.getColumnModel().getColumn(0).setPreferredWidth(90);
            jtProdutos.getColumnModel().getColumn(0).setMaxWidth(90);
            jtProdutos.getColumnModel().getColumn(1).setPreferredWidth(160);
            jtProdutos.getColumnModel().getColumn(2).setMinWidth(70);
            jtProdutos.getColumnModel().getColumn(2).setPreferredWidth(70);
            jtProdutos.getColumnModel().getColumn(2).setMaxWidth(70);
            jtProdutos.getColumnModel().getColumn(3).setMinWidth(100);
            jtProdutos.getColumnModel().getColumn(3).setPreferredWidth(100);
            jtProdutos.getColumnModel().getColumn(3).setMaxWidth(100);
            jtProdutos.getColumnModel().getColumn(4).setMinWidth(100);
            jtProdutos.getColumnModel().getColumn(4).setPreferredWidth(100);
            jtProdutos.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 145, 857, 400));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel9.setText("Produto:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 78, -1, -1));

        jtfValorTotal.setEditable(false);
        jtfValorTotal.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jPanel1.add(jtfValorTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(677, 558, 190, 30));

        btnExcluir.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        jPanel1.add(btnExcluir, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 600, 100, 30));

        jtfCodigoCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jtfCodigoCliente.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jtfCodigoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfCodigoClienteKeyReleased(evt);
            }
        });
        jPanel1.add(jtfCodigoCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 35, 150, 30));

        jtfCodigoProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jtfCodigoProduto.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jtfCodigoProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfCodigoProdutoKeyReleased(evt);
            }
        });
        jPanel1.add(jtfCodigoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 103, 150, 30));

        jtfCodigoPedido.setEditable(false);
        jtfCodigoPedido.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jPanel1.add(jtfCodigoPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(717, 35, 150, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel3.setText("Cód. da Venda:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(719, 10, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 877, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 5, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jtfQuantidadeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfQuantidadeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnAdicionar.requestFocus();
        }
    }//GEN-LAST:event_jtfQuantidadeKeyPressed

    private void campoPesquisaClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPesquisaClienteActionPerformed
        listaPesquisarCliente.setVisible(true);
        Enter = 1;
    }//GEN-LAST:event_campoPesquisaClienteActionPerformed

    private void campoPesquisaClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPesquisaClienteKeyReleased
        if (Enter == 0) {
            listarPesquisaClientes();
        } else {
            Enter = 0;
        }
    }//GEN-LAST:event_campoPesquisaClienteKeyReleased

    private void listaPesquisarClienteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaPesquisarClienteMousePressed
        recuperarPesquisaCliente();
        listaPesquisarCliente.setVisible(false);
    }//GEN-LAST:event_listaPesquisarClienteMousePressed

    private void campoPesquisaProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPesquisaProdutoActionPerformed
        listaPesquisarProduto.setVisible(true);
        Enter = 1;
    }//GEN-LAST:event_campoPesquisaProdutoActionPerformed

    private void campoPesquisaProdutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPesquisaProdutoKeyReleased
        if (Enter == 0) {
            listarPesquisaProdutos();
        } else {
            Enter = 0;
        }
    }//GEN-LAST:event_campoPesquisaProdutoKeyReleased

    private void listaPesquisarProdutoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaPesquisarProdutoMousePressed
        recuperarPesquisaProduto();
        listaPesquisarProduto.setVisible(false);
    }//GEN-LAST:event_listaPesquisarProdutoMousePressed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        adicionarProduto();
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limparTela();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int linha = jtProdutos.getSelectedRow();
        DefaultTableModel modeloCadastro = (DefaultTableModel) jtProdutos.getModel();

        if (linha != -1) {
            modeloCadastro.removeRow(linha);
            somaValorTotalProdutos();
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void jtfCodigoClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfCodigoClienteKeyReleased
        try {
            if (Enter == 0) {
                recuperarClienteCodigo();
            } else {
                Enter = 0;
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jtfCodigoClienteKeyReleased


    private void jtProdutosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtProdutosKeyReleased
        editarQuantidadeProdutoTabela();
    }//GEN-LAST:event_jtProdutosKeyReleased

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (mainView.editarSalvar.equals("salvar")) {
            salvarPedido();
            mainView.setEnabled(true);
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void jtfCodigoProdutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfCodigoProdutoKeyReleased
        try {
            if (Enter == 0) {
                recuperarProdutoCodigo();
            } else {
                Enter = 0;
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jtfCodigoProdutoKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PedidoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PedidoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PedidoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PedidoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PedidoView().setVisible(true);
            }
        });
    }

    /**
     * Lista os clientes na pesquisa dinâmica.
     */
    private void listarPesquisaClientes() {
        String nomeCliente = campoPesquisaCliente.getText().toUpperCase();
        listaClienteModel = (ArrayList<ClienteModel>) clienteController.retornarListaClienteNomeController(nomeCliente);
        modelo.removeAllElements();
        for (int c = 0; c < listaClienteModel.size(); c++) {
            modelo.addElement(listaClienteModel.get(c).getNomeCliente());
        }
        if (campoPesquisaCliente.getText().isEmpty()) {
            listaPesquisarCliente.setVisible(false);
        } else {
            listaPesquisarCliente.setVisible(true);
        }
    }

    /**
     * Lista os produtos na pesquisa dinâmica.
     */
    private void listarPesquisaProdutos() {
        String nomeProduto = campoPesquisaProduto.getText().toUpperCase();
        listaProdutosModel = (ArrayList<ProdutoModel>) produtoController.retornarListaProdutoController(nomeProduto);
        modelo.removeAllElements();
        for (int c = 0; c < listaProdutosModel.size(); c++) {
            modelo.addElement(listaProdutosModel.get(c).getDescricaoProduto());
        }
        if (campoPesquisaProduto.getText().isEmpty()) {
            listaPesquisarProduto.setVisible(false);
        } else {
            listaPesquisarProduto.setVisible(true);
        }
    }

    /**
     * Recupera informações do cliente na pesquisa dinâmica.
     */
    private void recuperarPesquisaCliente() {
        String nome = listaPesquisarCliente.getSelectedValue();
        campoPesquisaCliente.setText(nome);
        clienteModel = clienteController.retornarClienteNomeController(nome);
        jtfCodigoCliente.setValue(clienteModel.getCodigoCliente());
    }

    /**
     * Recupera informações do produto na pesquisa dinâmica.
     */
    private void recuperarPesquisaProduto() {
        String produto = listaPesquisarProduto.getSelectedValue();
        campoPesquisaProduto.setText(produto);
        produtoModel = produtoController.retornarProdutoNomeController(produto);
        jtfCodigoProduto.setText(String.valueOf(produtoModel.getCodigoProduto()));
    }

    private void recuperarClienteCodigo() {
        int codigo = Integer.parseInt(jtfCodigoCliente.getText());
        clienteModel = clienteController.retornarClienteController((long) codigo);
        campoPesquisaCliente.setText(clienteModel.getNomeCliente());
    }

    private void recuperarProdutoCodigo() {
        int codigo = Integer.parseInt(jtfCodigoProduto.getText());
        produtoModel = produtoController.retornarProdutoController((long) codigo);
        campoPesquisaProduto.setText(produtoModel.getDescricaoProduto());
    }

    private void limparCamposProduto() {
        jtfCodigoProduto.setText("");
        campoPesquisaProduto.setText("");
        jtfQuantidade.setText("");
    }

    private void limparTela() {
        jtfCodigoCliente.setText("");
        campoPesquisaCliente.setText("");
        jtfCodigoProduto.setText("");
        campoPesquisaProduto.setText("");
        jtfQuantidade.setText("");
        jtfValorTotal.setText("");
        DefaultTableModel tabela = (DefaultTableModel) jtProdutos.getModel();
        tabela.setNumRows(0);
    }

    private void somaValorTotalProdutos() {
        double somaTotal = 0, valor;
        int contador = jtProdutos.getRowCount();
        NumberFormat valorReal = NumberFormat.getCurrencyInstance(localeBR);

        for (int i = 0; i < contador; i++) {
            String valorString = jtProdutos.getValueAt(i, 4).toString();
            try {
                Number number = valorReal.parse(valorString);
                valor = number.doubleValue();
                somaTotal += valor;
            } catch (ParseException e) {
                System.out.println("Erro ao converter o valor: " + e.getMessage());
            }
        }

        jtfValorTotal.setText(valorReal.format(somaTotal));
    }

    private void salvarPedido() {
        try {
            if (jtfCodigoCliente.getText().isBlank()) {
                JOptionPane.showMessageDialog(null, "Cliente não informado", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
            }
            // Recuperar o cliente
            Long codigoCliente = Long.parseLong(jtfCodigoCliente.getText());
            ClienteModel clienteModel = clienteController.retornarClienteController(codigoCliente);
            if (clienteModel == null) {
                JOptionPane.showMessageDialog(null, "Cliente não encontrado", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
            }
            if (validador.validarCredito(clienteModel, FormatarValor.formatarStringDouble(jtfValorTotal.getText()))) {

            } else {
                // Criar e preencher o PedidoModel
                PedidoModel pedidoModel = new PedidoModel();
                pedidoModel.setCliente(clienteModel);
                pedidoModel.setDataPedido(dataAtual);
                pedidoModel.setValorPedido(FormatarValor.formatarStringDouble(jtfValorTotal.getText()));

                // Preparar e adicionar os itens ao PedidoModel
                List<ItemPedidoModel> listaItensPedido = prepararItensPedido(pedidoModel);
                pedidoModel.adicionarItens(listaItensPedido);

                // Salvar o pedido com os itens
                int codigoVenda = pedidoController.salvarPedidoController(pedidoModel);
                if (codigoVenda > 0) {
                    pedidoModel.setCodigoPedido((long) codigoVenda);
                    JOptionPane.showMessageDialog(this, "Pedido salvo com sucesso", "ATENÇÃO", JOptionPane.INFORMATION_MESSAGE);
                    limparTela();
                    mainView.listarPedidos();
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Código de venda gerado inválido", "ERRO", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao salvar venda", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private List<ItemPedidoModel> prepararItensPedido(PedidoModel pedidoModel) {
        List<ItemPedidoModel> listaItensPedido = new ArrayList<>();
        DefaultTableModel tabela = (DefaultTableModel) jtProdutos.getModel();
        int linhas = tabela.getRowCount();

        for (int i = 0; i < linhas; i++) {
            ItemPedidoModel itemPedidoModel = new ItemPedidoModel();
            itemPedidoModel.setPedido(pedidoModel);

            Long codigoProduto = Long.parseLong(tabela.getValueAt(i, 0).toString());
            ProdutoModel produtoModel = produtoController.retornarProdutoController(codigoProduto);
            itemPedidoModel.setProduto(produtoModel);

            itemPedidoModel.setQuantidade(Double.parseDouble(tabela.getValueAt(i, 2).toString()));
            itemPedidoModel.setValorUnitario(FormatarValor.formatarStringDouble(tabela.getValueAt(i, 3).toString()));
            itemPedidoModel.setValorTotal(FormatarValor.formatarStringDouble(tabela.getValueAt(i, 4).toString()));

            listaItensPedido.add(itemPedidoModel);
        }
        return listaItensPedido;
    }

    private void adicionarProduto() {
        if (jtfQuantidade.getText().isBlank() || Integer.parseInt(jtfQuantidade.getText()) <= 0) {
            JOptionPane.showMessageDialog(this, "Quantidade informada inválida", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
        } else if (jtfCodigoProduto.getText().isBlank()) {
            JOptionPane.showMessageDialog(this, "Produto não informado", "ATENÇÃO",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            produtoModel = produtoController.retornarProdutoController(Long.parseLong(jtfCodigoProduto.getText()));
            // Inicia a linha na tabela
            DefaultTableModel modeloCadastro = (DefaultTableModel) jtProdutos.getModel();
            int quantidade = Integer.parseInt(jtfQuantidade.getText());
            NumberFormat valorReal = NumberFormat.getCurrencyInstance(localeBR);
            int contador = 0;
            for (int i = 0; i < contador; i++) {
                modeloCadastro.setNumRows(0);
            }

            // Verifica se há um produto já está na tabela
            boolean produtoEncontrado = false;
            for (int i = 0; i < modeloCadastro.getRowCount(); i++) {
                Long idProdutoTabela = Long.parseLong(modeloCadastro.getValueAt(i, 0).toString());
                int quantidadeAtual = Integer.parseInt(modeloCadastro.getValueAt(i, 2).toString());
                if (idProdutoTabela.equals(produtoModel.getCodigoProduto())) {
                    int quantidadeNova = quantidadeAtual + quantidade;
                    modeloCadastro.setValueAt(quantidadeNova, i, 2);
                    modeloCadastro.setValueAt(valorReal.format(produtoModel.getValorProduto()), i, 3);
                    modeloCadastro.setValueAt(valorReal.format(quantidadeNova * produtoModel.getValorProduto()), i, 4);
                    produtoEncontrado = true;
                    break;
                }
            }

            if (!produtoEncontrado) {
                modeloCadastro.addRow(new Object[]{
                    produtoModel.getCodigoProduto(),
                    produtoModel.getDescricaoProduto(),
                    jtfQuantidade.getText(),
                    valorReal.format(produtoModel.getValorProduto()),
                    valorReal.format(quantidade * produtoModel.getValorProduto())
                });
            }

            limparCamposProduto();
            somaValorTotalProdutos();
        }
    }

    private void editarQuantidadeProdutoTabela() {
        int linha = jtProdutos.getSelectedRow();
        DefaultTableModel modeloCadastro = (DefaultTableModel) jtProdutos.getModel();
        NumberFormat valorReal = NumberFormat.getCurrencyInstance(localeBR);
        int quantidade = Integer.parseInt(jtProdutos.getValueAt(linha, 2).toString());

        try {
            if (Enter == 0) {
                if (quantidade > 0) {
                    modeloCadastro.setValueAt(quantidade, linha, 2);
                    modeloCadastro.setValueAt(valorReal.format(produtoModel.getValorProduto()), linha, 3);
                    modeloCadastro.setValueAt(valorReal.format(quantidade * produtoModel.getValorProduto()), linha, 4);
                    somaValorTotalProdutos();
                } else if (quantidade == 0 || quantidade < 0) {
                    modeloCadastro.removeRow(linha);
                    somaValorTotalProdutos();
                }
            } else {
                Enter = 0;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void setPedidoModel(PedidoModel pedido) {
        this.pedidoModel = pedido;
        jtfCodigoCliente.setText(this.pedidoModel.getCliente().getCodigoCliente().toString());
        campoPesquisaCliente.setText(this.pedidoModel.getCliente().getNomeCliente());
        jtfCodigoPedido.setText(this.pedidoModel.getCodigoPedido().toString());
        jtfValorTotal.setText(valorReal.format(this.pedidoModel.getValorPedido()));

        List<ItemPedidoModel> listaProdutos = pedidoModel.getListaItens();
        DefaultTableModel tabela = (DefaultTableModel) jtProdutos.getModel();
        tabela.setNumRows(0);

        for (ItemPedidoModel item : listaProdutos) {
            int quantidade = (int) Math.round(item.getQuantidade());
            tabela.addRow(new Object[]{
                item.getCodigoItemPedido(),
                item.getProduto().getDescricaoProduto(),
                quantidade,
                valorReal.format(item.getValorUnitario()),
                valorReal.format(item.getValorTotal())
            });
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JTextField campoPesquisaCliente;
    private javax.swing.JTextField campoPesquisaProduto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtProdutos;
    private javax.swing.JFormattedTextField jtfCodigoCliente;
    private javax.swing.JTextField jtfCodigoPedido;
    private javax.swing.JFormattedTextField jtfCodigoProduto;
    private javax.swing.JFormattedTextField jtfQuantidade;
    private javax.swing.JTextField jtfValorTotal;
    private javax.swing.JList<String> listaPesquisarCliente;
    private javax.swing.JList<String> listaPesquisarProduto;
    // End of variables declaration//GEN-END:variables
}
